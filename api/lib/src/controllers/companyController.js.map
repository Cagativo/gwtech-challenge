{"version":3,"file":"companyController.js","sourceRoot":"","sources":["../../../gwtech_api/src/controllers/companyController.ts"],"names":[],"mappings":";;AAAA,8CAAuC;AAEvC,kFAA2E;AAG3E,gEAAyD;AAEzD,MAAqB,iBAAiB;IAClC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG;QACvB,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAEpC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iBAAO,CAAC,GAAG,CAAkB,OAAO,CAAC,CAAC;QACpE,MAAM,aAAa,GAAG,mCAAyB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAErE,MAAM,SAAS,GAAG,aAAa,CAAC,OAAO,CAAmB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEhF,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG;QAC1B,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAExC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iBAAO,CAAC,GAAG,CAAkB,OAAO,CAAC,CAAC;QAElE,IAAI,EAAE,EAAE;YACJ,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,CAAA;SAChD;QAED,MAAM,aAAa,GAAG,mCAAyB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAErE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iBAAO,CAAC,GAAG,CAAkB,OAAO,CAAC,CAAC;QAEpE,MAAM,UAAU,GAAG,0BAAgB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAE1D,OAAO,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAChC,CAAC;CACJ;AA7BD,oCA6BC","sourcesContent":["import baseUrl from '../utils/baseUrl';\nimport UserInterface from '../interfaces/UserInterface';\nimport filterUsersByCompanyGroup from '../utils/filterUsersByCompanyGroup';\nimport CompanyInterface from '../interfaces/CompanyInterface';\nimport PostInterface from '../interfaces/PostInterface';\nimport formatUsersPosts from '../utils/formatUsersPosts';\n\nexport default class companyController {\n    static async index(req, res) {\n        const { company_name } = req.params;\n\n        const { data: users } = await baseUrl.get<UserInterface[]>('users');\n        const usersFiltered = filterUsersByCompanyGroup(users, company_name);\n\n        const companies = usersFiltered.flatMap<CompanyInterface>(user => user.company);\n\n        return res.send(companies);\n    }\n\n    static async getUsers(req, res) {\n        const { id, company_name } = req.params;\n\n        let { data: users } = await baseUrl.get<UserInterface[]>('users');\n\n        if (id) {\n            users = users.filter(user => +id === user.id)\n        }\n\n        const usersFiltered = filterUsersByCompanyGroup(users, company_name);\n\n        const { data: posts } = await baseUrl.get<PostInterface[]>(`posts`);\n\n        const usersPosts = formatUsersPosts(usersFiltered, posts);\n\n        return res.send(usersPosts);\n    }\n}\n"]}