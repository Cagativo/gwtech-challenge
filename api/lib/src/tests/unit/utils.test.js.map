{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../../../../gwtech_api/src/tests/unit/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import filterUsersByCompanyGroup from '../../utils/filterUsersByCompanyGroup';\nimport { users, usersWithoutCompanyGroup, posts } from '../mocks';\nimport formatUsersPosts from '../../utils/formatUsersPosts';\n\ndescribe('Test the filterUsersByCompanyGroup', () => {\n    it('should receive a list of users and return only users works for a company group', () => {\n        const usersFiltered = filterUsersByCompanyGroup(users);\n\n        expect(usersFiltered).toHaveLength(2);\n        expect(usersFiltered).toStrictEqual([\n            {\n                id: 7,\n                name: 'Kurtis Weissnat',\n                username: 'Elwyn.Skiles',\n                email: 'Telly.Hoeger@billy.biz',\n                address: {\n                    street: 'Rex Trail',\n                    suite: 'Suite 280',\n                    city: 'Howemouth',\n                    zipcode: '58804-1099',\n                    geo: {\n                        lat: '24.8918',\n                        lng: '21.8984',\n                    },\n                },\n                phone: '210.067.6132',\n                website: 'elvis.io',\n                company: {\n                    name: 'Johns Group',\n                    catchPhrase: 'Configurable multimedia task-force',\n                    bs: 'generate enterprise e-tailers',\n                },\n            },\n            {\n                id: 8,\n                name: 'Nicholas Runolfsdottir V',\n                username: 'Maxime_Nienow',\n                email: 'Sherwood@rosamond.me',\n                address: {\n                    street: 'Ellsworth Summit',\n                    suite: 'Suite 729',\n                    city: 'Aliyaview',\n                    zipcode: '45169',\n                    geo: {\n                        lat: '-14.3990',\n                        lng: '-120.7677',\n                    },\n                },\n                phone: '586.493.6943 x140',\n                website: 'jacynthe.com',\n                company: {\n                    name: 'Abernathy Group',\n                    catchPhrase: 'Implemented secondary concept',\n                    bs: 'e-enable extensible e-tailers',\n                },\n            },\n        ]);\n    });\n\n    it('should receive a list of users and return void array because no have a company group', () => {\n        const usersFiltered = filterUsersByCompanyGroup(usersWithoutCompanyGroup);\n\n        expect(usersFiltered).toHaveLength(0);\n        expect(usersFiltered).toStrictEqual([]);\n    });\n\n    it(\n        'should receive a list of users and a company name and return only users work for the company received ' +\n            'if the company participates a company group',\n        () => {\n            const company_name = 'Johns Group';\n\n            const usersFiltered = filterUsersByCompanyGroup(users, company_name);\n\n            expect(usersFiltered).toHaveLength(1);\n            expect(usersFiltered).toStrictEqual([\n                {\n                    id: 7,\n                    name: 'Kurtis Weissnat',\n                    username: 'Elwyn.Skiles',\n                    email: 'Telly.Hoeger@billy.biz',\n                    address: {\n                        street: 'Rex Trail',\n                        suite: 'Suite 280',\n                        city: 'Howemouth',\n                        zipcode: '58804-1099',\n                        geo: {\n                            lat: '24.8918',\n                            lng: '21.8984',\n                        },\n                    },\n                    phone: '210.067.6132',\n                    website: 'elvis.io',\n                    company: {\n                        name: 'Johns Group',\n                        catchPhrase: 'Configurable multimedia task-force',\n                        bs: 'generate enterprise e-tailers',\n                    },\n                },\n            ]);\n        },\n    );\n\n    it(\n        'should receive a list of users and a company name and return void array because ' +\n            'the company no participates of a company group',\n        () => {\n            const company_name = 'Romaguera-Crona';\n\n            const usersFiltered = filterUsersByCompanyGroup(users, company_name);\n\n            expect(usersFiltered).toHaveLength(0);\n            expect(usersFiltered).toStrictEqual([]);\n        },\n    );\n});\n\ndescribe('Test the formatUsersPosts', () => {\n    it('should receive a list of users and posts and return user posts', () => {\n        const usersPosts = formatUsersPosts(users, posts);\n\n        expect(usersPosts).toHaveLength(3);\n        expect(usersPosts).toStrictEqual([\n            {\n                id: 1,\n                name: 'Leanne Graham',\n                company: 'Romaguera-Crona',\n                posts: [],\n            },\n            {\n                id: 7,\n                name: 'Kurtis Weissnat',\n                company: 'Johns Group',\n                posts: [\n                    {\n                        id: 61,\n                        userId: 7,\n                        title: 'voluptatem doloribus consectetur est ut ducimus',\n                        body:\n                            'ab nemo optio odio delectus tenetur corporis similique nobis repellendus rerum omnis facilis vero blanditiis debitis in nesciunt doloribus dicta dolores magnam minus velit',\n                    },\n                ],\n            },\n            {\n                id: 8,\n                name: 'Nicholas Runolfsdottir V',\n                company: 'Abernathy Group',\n                posts: [\n                    {\n                        id: 74,\n                        userId: 8,\n                        title: 'enim unde ratione doloribus quas enim ut sit sapiente',\n                        body:\n                            'odit qui et et necessitatibus sint veniam mollitia amet doloremque molestiae commodi similique magnam et quam blanditiis est itaque quo et tenetur ratione occaecati molestiae tempora',\n                    },\n                ],\n            },\n        ]);\n    });\n});\n"]}